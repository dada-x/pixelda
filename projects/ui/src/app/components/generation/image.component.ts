import { Component, OnInit, OnDestroy, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { TranslateModule } from '@ngx-translate/core';
import {
  GenerationService,
  ImageGenerationRequest,
  GenerationResponse,
} from '../../services/generation.service';
import { SettingsService } from '../../services/settings.service';

@Component({
  selector: 'app-image',
  standalone: true,
  imports: [CommonModule, FormsModule, TranslateModule],
  templateUrl: './image.component.html',
  styleUrls: ['./image.component.scss'],
})
export class ImageComponent implements OnInit, OnDestroy {
  characterDescription = '';
  faceWear = '';
  bodyWear = '';
  footWear = '';
  additionalDescription = '';

  negativePrompt = '';
  size = '1024*1024';
  seed: number | null = null;

  finalPrompt = '';

  result = signal<GenerationResponse | null>(null);
  loading = signal(false);
  imageLoading = signal(false);

  constructor(
    private generationService: GenerationService,
    private settingService: SettingsService,
    private router: Router
  ) {}

  ngOnInit() {
    this.loadFormData();
    if (!this.finalPrompt.trim() && this.hasInputData()) {
      this.finalPrompt = this.buildPrompt();
    }
  }

  ngOnDestroy() {
    this.saveFormData();
  }

  private hasInputData(): boolean {
    return !!(
      this.characterDescription.trim() ||
      this.faceWear.trim() ||
      this.bodyWear.trim() ||
      this.footWear.trim() ||
      this.additionalDescription.trim()
    );
  }

  private saveFormData() {
    const formData = {
      characterDescription: this.characterDescription,
      faceWear: this.faceWear,
      bodyWear: this.bodyWear,
      footWear: this.footWear,
      additionalDescription: this.additionalDescription,
      negativePrompt: this.negativePrompt,
      size: this.size,
      seed: this.seed,
      finalPrompt: this.finalPrompt,
    };
    localStorage.setItem('pixelda_image_form', JSON.stringify(formData));
  }

  private loadFormData() {
    const savedData = localStorage.getItem('pixelda_image_form');
    if (savedData) {
      try {
        const formData = JSON.parse(savedData);
        this.characterDescription = formData.characterDescription || '';
        this.faceWear = formData.faceWear || '';
        this.bodyWear = formData.bodyWear || '';
        this.footWear = formData.footWear || '';
        this.additionalDescription = formData.additionalDescription || '';
        this.negativePrompt = formData.negativePrompt || '';
        this.size = formData.size || '1024*1024';
        this.seed = formData.seed;
        this.finalPrompt = formData.finalPrompt || '';
      } catch (error) {
        console.error('Error loading saved form data:', error);
        localStorage.removeItem('pixelda_image_form');
      }
    }
  }

  onFormChange() {
    this.updateFinalPrompt();
    this.saveFormData();
  }

  private updateFinalPrompt() {
    const autoGeneratedPrompt = this.buildPrompt();
    this.finalPrompt = autoGeneratedPrompt;
  }

  onFinalPromptChange() {
    this.saveFormData();
  }

  buildPrompt(): string {
    const parts: string[] = [];

    if (this.characterDescription.trim()) {
      parts.push(this.characterDescription.trim());
    }

    if (this.faceWear.trim()) {
      parts.push(`wearing ${this.faceWear.trim()} on face`);
    }

    if (this.bodyWear.trim()) {
      parts.push(`wearing ${this.bodyWear.trim()} on body`);
    }

    if (this.footWear.trim()) {
      parts.push(`wearing ${this.footWear.trim()} on feet`);
    }

    if (this.additionalDescription.trim()) {
      parts.push(this.additionalDescription.trim());
    }

    return `A high-resolution pixel-art game asset depicting ${parts.join(
      ', '
    )} Against a solid green screen background as RGB #00b140.`;
  }

  generateImage() {
    const prompt = this.finalPrompt.trim() || this.buildPrompt();

    if (!prompt.trim()) {
      alert('Please provide at least a character description or additional description');
      return;
    }

    this.loading.set(true);
    this.imageLoading.set(true);

    const request: ImageGenerationRequest = {
      prompt,
      negative_prompt: this.negativePrompt || undefined,
      size: this.size,
      seed: this.seed || undefined,
      task_id: this.generationService.generateTaskId('img'),
      model_type: this.settingService.getActiveModel(),
    };

    this.generationService.generateImage(request).subscribe({
      next: (result) => {
        this.result.set(result);
        this.loading.set(false);
        if (result.url && !result.error_info) {
          this.storeGenerationToHistory(result, prompt);
        }
      },
      error: (error) => {
        this.result.set({
          url: '',
          task_id: request.task_id,
          error_info: error.message,
        });
        this.loading.set(false);
        this.imageLoading.set(false);
      },
    });
  }

  clearForm() {
    this.characterDescription = '';
    this.faceWear = '';
    this.bodyWear = '';
    this.footWear = '';
    this.additionalDescription = '';
    this.negativePrompt = '';
    this.seed = null;
    this.finalPrompt = '';
    this.result.set(null);
    localStorage.removeItem('pixelda_image_form');
  }

  regenerateImage() {
    if (this.result() && !this.result()!.error_info) {
      this.generateImage();
    }
  }

  navigateToAnimation() {
    if (this.result() && this.result()!.url) {
      localStorage.setItem('pixelda_animation_image_url', this.result()!.url);
      this.router.navigate(['/generate/animation']);
    }
  }

  onImageLoad() {
    this.imageLoading.set(false);
  }

  onImageError() {
    this.imageLoading.set(false);
    console.error('Failed to load generated image');
  }

  private storeGenerationToHistory(result: GenerationResponse, prompt: string) {
    const historyItem = {
      id: result.task_id || `img_${Date.now()}`,
      type: 'image',
      url: result.url,
      prompt: prompt,
      timestamp: new Date().toISOString(),
      size: this.size,
      seed: this.seed,
    };

    const existingHistory = localStorage.getItem('pixelda_generation_history');
    let history: any[] = [];

    if (existingHistory) {
      try {
        history = JSON.parse(existingHistory);
      } catch (error) {
        console.error('Error parsing generation history:', error);
        history = [];
      }
    }

    const now = new Date();
    const maxAge = 24 * 60 * 60 * 1000;
    history = history.filter((item) => {
      const itemDate = new Date(item.timestamp);
      const age = now.getTime() - itemDate.getTime();
      return age <= maxAge;
    });

    history.unshift(historyItem);

    if (history.length > 50) {
      history = history.slice(0, 50);
    }

    localStorage.setItem('pixelda_generation_history', JSON.stringify(history));
  }
}
